#!/usr/bin/env node

/**
 * Test r√©el de l'API complete avec un wallet Solana
 */

require('dotenv').config();

async function callCompleteAPI() {
    console.log('üöÄ APPEL R√âEL √Ä L\'API WALLET-ANALYZER COMPLETE\n');
    console.log('=' * 50);
    
    const apiUrl = process.env.API_BASE_URL + '/wallet-analyzer';
    const authToken = process.env.SUPABASE_ANON_KEY;
    
    // Wallet d'exemple (adresse publique connue)
    const testWallet = "HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH";
    
    console.log(`üîç Analyse du wallet: ${testWallet}`);
    console.log(`üì° Endpoint: /complete/${testWallet}`);
    console.log(`üîß Mode: Analyse compl√®te synchrone (GET)\n`);
    
    try {
        // Appel API avec la m√©thode GET recommand√©e
        const response = await fetch(`${apiUrl}/complete/${testWallet}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log(`üìä Status: ${response.status}`);
        console.log(`üïê Response Time: ${Date.now()}ms`);
        
        if (response.ok) {
            const data = await response.json();
            
            console.log('\n‚úÖ DONN√âES RE√áUES:');
            console.log('=' * 25);
            
            // Analyser la structure des donn√©es
            console.log(`üìã Structure:`);
            console.log(`   ‚Ä¢ Type: ${typeof data}`);
            console.log(`   ‚Ä¢ Cl√©s: ${Object.keys(data).join(', ')}`);
            console.log(`   ‚Ä¢ Wallet: ${data.wallet_address}`);
            console.log(`   ‚Ä¢ Type d'analyse: ${data.analysis_type}`);
            console.log(`   ‚Ä¢ G√©n√©r√© le: ${data.generated_at}\n`);
            
            // Affichage des donn√©es principales
            if (data.data) {
                const analysisData = data.data;
                
                // R√©sum√© des transactions
                if (analysisData.transaction_summary) {
                    console.log('üìà R√âSUM√â DES TRANSACTIONS:');
                    const ts = analysisData.transaction_summary;
                    console.log(`   ‚Ä¢ Total transactions: ${ts.total_transactions}`);
                    console.log(`   ‚Ä¢ Achats: ${ts.buy_transactions}`);
                    console.log(`   ‚Ä¢ Ventes: ${ts.sell_transactions}`);
                    console.log(`   ‚Ä¢ Premi√®re: ${new Date(ts.first_transaction).toLocaleDateString()}`);
                    console.log(`   ‚Ä¢ Derni√®re: ${new Date(ts.last_transaction).toLocaleDateString()}\n`);
                }
                
                // Analyse des trades
                if (analysisData.trade_analysis) {
                    console.log('üí∞ ANALYSE DES TRADES:');
                    const ta = analysisData.trade_analysis;
                    console.log(`   ‚Ä¢ Nombre de trades: ${ta.total_trades}`);
                    console.log(`   ‚Ä¢ Volume total: $${ta.total_volume_usd?.toLocaleString()}`);
                    console.log(`   ‚Ä¢ PnL total: $${ta.total_pnl_usd?.toLocaleString()}`);
                    console.log(`   ‚Ä¢ Win rate: ${ta.win_rate?.toFixed(1)}%`);
                    console.log(`   ‚Ä¢ Tokens uniques: ${ta.unique_tokens}`);
                    console.log(`   ‚Ä¢ Taille moyenne trade: $${ta.average_trade_size?.toLocaleString()}\n`);
                    
                    // Afficher quelques trades
                    if (ta.trades && ta.trades.length > 0) {
                        console.log('   üìù Exemples de trades:');
                        ta.trades.slice(0, 3).forEach((trade, i) => {
                            console.log(`   ${i+1}. ${trade.token_symbol}: ${trade.type} $${trade.amount_usd?.toFixed(0)} | PnL: $${trade.pnl_usd?.toFixed(0)} | ROI: ${trade.roi_percentage?.toFixed(1)}%`);
                        });
                        console.log('');
                    }
                }
                
                // Analyse des tokens
                if (analysisData.token_analysis) {
                    console.log('üéØ ANALYSE DES TOKENS:');
                    const tokens = analysisData.token_analysis;
                    console.log(`   ‚Ä¢ Tokens uniques trad√©s: ${tokens.total_unique_tokens}`);
                    
                    if (tokens.best_performing_token) {
                        console.log(`   ‚Ä¢ Meilleur token: ${tokens.best_performing_token.symbol} (ROI: ${tokens.best_performing_token.roi_percentage?.toFixed(1)}%)`);
                    }
                    if (tokens.worst_performing_token) {
                        console.log(`   ‚Ä¢ Pire token: ${tokens.worst_performing_token.symbol} (ROI: ${tokens.worst_performing_token.roi_percentage?.toFixed(1)}%)`);
                    }
                    
                    if (tokens.tokens && tokens.tokens.length > 0) {
                        console.log(`\n   üìä Top tokens trad√©s:`);
                        tokens.tokens.slice(0, 5).forEach((token, i) => {
                            console.log(`   ${i+1}. ${token.symbol}: MC $${token.market_cap?.toLocaleString()} | Vol $${token.volume_24h?.toLocaleString()} | ROI: ${token.roi_percentage?.toFixed(1)}%`);
                        });
                    }
                    console.log('');
                }
                
                // M√©triques avanc√©es
                if (analysisData.advanced_metrics) {
                    console.log('üìä M√âTRIQUES AVANC√âES:');
                    const metrics = analysisData.advanced_metrics;
                    console.log(`   ‚Ä¢ Ratio de Sharpe: ${metrics.sharpe_ratio?.toFixed(2)}`);
                    console.log(`   ‚Ä¢ Drawdown max: ${metrics.max_drawdown_percentage?.toFixed(1)}%`);
                    console.log(`   ‚Ä¢ Volatilit√©: ${metrics.volatility_percentage?.toFixed(1)}%`);
                    console.log(`   ‚Ä¢ Alpha generation: ${metrics.alpha_generation?.toFixed(1)}%`);
                    console.log(`   ‚Ä¢ Beta march√©: ${metrics.beta_to_market?.toFixed(2)}`);
                    console.log(`   ‚Ä¢ Win streak max: ${metrics.longest_winning_streak}`);
                    console.log(`   ‚Ä¢ Lose streak max: ${metrics.longest_losing_streak}\n`);
                }
                
                // Analyse alpha
                if (analysisData.alpha_analysis) {
                    console.log('üî• ANALYSE ALPHA:');
                    const alpha = analysisData.alpha_analysis;
                    console.log(`   ‚Ä¢ Score Alpha: ${alpha.alpha_score?.toFixed(1)}/10 (${alpha.alpha_category})`);
                    console.log(`   ‚Ä¢ Confiance: ${alpha.alpha_confidence}%`);
                    console.log(`   ‚Ä¢ D√©tection pr√©coce: ${alpha.early_detection_ability}`);
                    console.log(`   ‚Ä¢ Force signal: ${alpha.signal_strength}/100`);
                    console.log(`   ‚Ä¢ Timing entr√©e: ${alpha.entry_timing_score}/10`);
                    console.log(`   ‚Ä¢ Timing sortie: ${alpha.exit_timing_score}/10`);
                    console.log(`   ‚Ä¢ Gestion risque: ${alpha.risk_management_score}/10\n`);
                    
                    if (alpha.strengths && alpha.strengths.length > 0) {
                        console.log('   ÔøΩ Forces:');
                        alpha.strengths.forEach((strength, i) => {
                            console.log(`   ${i+1}. ${strength}`);
                        });
                        console.log('');
                    }
                }
                
                // Recommandations copy-trading
                if (analysisData.copy_trading_recommendations) {
                    console.log('üéØ RECOMMANDATIONS COPY-TRADING:');
                    const reco = analysisData.copy_trading_recommendations;
                    console.log(`   ‚Ä¢ Recommandation: ${reco.recommendation}`);
                    console.log(`   ‚Ä¢ Confiance: ${reco.confidence_level}%`);
                    console.log(`   ‚Ä¢ Allocation sugg√©r√©e: ${reco.suggested_allocation_percentage}%`);
                    console.log(`   ‚Ä¢ Niveau de risque: ${reco.risk_level}`);
                    console.log(`   ‚Ä¢ Horizon temporel: ${reco.time_horizon}`);
                    
                    if (reco.risk_management) {
                        console.log(`   ‚Ä¢ Stop loss: ${reco.risk_management.stop_loss_percentage}%`);
                        console.log(`   ‚Ä¢ Take profit: ${reco.risk_management.take_profit_percentage}%`);
                    }
                    
                    if (reco.strategies && reco.strategies.length > 0) {
                        console.log('   üìã Strat√©gies:');
                        reco.strategies.forEach((strategy, i) => {
                            console.log(`     ${i+1}. ${strategy}`);
                        });
                    }
                    console.log('');
                }
                
                // Classification finale
                const alphaScore = analysisData.alpha_analysis?.alpha_score || 0;
                const recommendation = analysisData.copy_trading_recommendations?.recommendation || 'UNKNOWN';
                
                console.log('üèÜ CLASSIFICATION FINALE:');
                console.log(`   üéØ Wallet Alpha Score: ${alphaScore.toFixed(1)}/10`);
                console.log(`   üìà Recommandation: ${recommendation}`);
                console.log(`   üí° Verdict: ${alphaScore >= 7 ? 'üî• WALLET ALPHA D√âTECT√â' : alphaScore >= 5 ? '‚ö° WALLET INT√âRESSANT' : 'üìä WALLET STANDARD'}\n`);
                
            } else {
                console.log('‚ö†Ô∏è Aucune donn√©e d\'analyse trouv√©e dans la r√©ponse');
            }
            
        } else {
            const errorText = await response.text();
            console.log(`\n‚ùå ERREUR API:`);
            console.log(`   Status: ${response.status}`);
            console.log(`   Message: ${errorText}`);
        }
        
    } catch (err) {
        console.log(`\n‚ùå ERREUR R√âSEAU:`);
        console.log(`   ${err.message}`);
    }
    
    console.log('\n' + '=' * 50);
    console.log('üìã CONCLUSION:');
    console.log('‚úÖ API wallet-analyzer op√©rationnelle avec analyse compl√®te');
    console.log('üî• Toutes les donn√©es n√©cessaires sont retourn√©es');
    console.log('üéØ Pr√™t pour l\'analyse de wallets alpha professionnelle');
}

if (require.main === module) {
    callCompleteAPI().catch(console.error);
}
