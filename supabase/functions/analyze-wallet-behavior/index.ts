import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders
    });
  }

  try {
    console.log('ü§ñ [ANALYZE WALLET] D√©but analyse comportementale copy trading Solana...');
    
    const { walletData, walletAddress } = await req.json();
    
    if (!walletData) {
      throw new Error('Donn√©es du portefeuille manquantes');
    }

    console.log(`üéØ [ANALYZE WALLET] Analyse pour wallet: ${walletAddress || 'unknown'}`);
    console.log('üìä [ANALYZE WALLET] Donn√©es re√ßues:', {
      hasTokens: !!walletData.tokens,
      tokensCount: walletData.tokens?.length || 0,
      totalPnl: walletData.total_pnl_usd,
      winRate: walletData.winrate,
      totalTrades: walletData.total_trades || walletData.total_tokens_traded
    });

    // Cr√©er un prompt sp√©cialis√© pour l'analyse copy trading Solana
    const analysisPrompt = `
Tu es un expert analyste crypto sp√©cialis√© en copy trading sur la blockchain Solana.
Ton objectif est d'analyser un portefeuille selon des crit√®res stricts de copy trading et de g√©n√©rer :

‚úÖ un scoring sur 100
‚úÖ une recommandation claire : üî¥ √† √©viter / üü° moyen / üü¢ excellent  
‚úÖ une explication concise mais pr√©cise

DONN√âES DU PORTEFEUILLE √Ä ANALYSER:
${JSON.stringify(walletData, null, 2)}

CRIT√àRES D'ANALYSE COPY TRADING SOLANA:

1. WIN RATE & PERFORMANCE
- Win rate minimum requis : 85%
- P√©riode d'analyse : 7 jours recommand√©s
- Nombre de transactions minimum : 50
- ROI minimum : 100%

2. ANTI-BOT / ANTI-FARMING
- Dur√©e de holding minimale : 10 minutes
- Nombre de transactions par jour : maximum 30
- ‚ö†Ô∏è √âvite les patterns de scalping r√©p√©titifs ou suspects
- D√©tecte les comportements de farming/bot

3. TAILLE DES POSITIONS
- Taille maximale d'un trade : 1000$
- Pourcentage maximum du supply d√©tenu par token : 5%
- √âvalue la diversification

4. TOKENS & STRAT√âGIE
- Se concentre sur des mid-cap ou gros market cap
- ‚úÖ Early mover = bonus significatif
- ‚ùå Ignore les wallets qui ne tradent que du SOL/USDC
- Analyse la qualit√© des tokens trad√©s

5. COPY TRADING PRATIQUE
- D√©lai acceptable entre leur trade et le v√¥tre : quelques minutes max
- DEX compatibles : Jupiter, Raydium, Orca
- Fr√©quence de trading adapt√©e au copy trading

ANALYSE OBLIGATOIRE:
- Calcule un score pr√©cis sur 100 bas√© sur les crit√®res ci-dessus
- D√©termine si c'est üü¢ excellent (85+), üü° moyen (60-84), ou üî¥ √† √©viter (<60)
- Explique en 2-3 phrases pourquoi ce wallet est/n'est pas adapt√© au copy trading
- Identifie les forces et faiblesses principales
- Donne des recommandations pratiques

IMPORTANT: R√©ponds UNIQUEMENT avec un JSON valide dans ce format exact:
{
  "copyTradingScore": 75,
  "recommendation": "üü°",
  "recommendationText": "moyen",
  "explanation": "Explication concise en 2-3 phrases du pourquoi ce wallet est adapt√© ou non au copy trading.",
  "criteriaAnalysis": {
    "winRateScore": 85,
    "antiBot": true,
    "positionSizing": "acceptable",
    "tokenStrategy": "diversifi√©e",
    "practicalCopyTrading": "facile"
  },
  "strengths": ["Force 1", "Force 2", "Force 3"],
  "weaknesses": ["Faiblesse 1", "Faiblesse 2"],
  "recommendations": ["Recommandation 1", "Recommandation 2"],
  "copyTradingViability": "Ce wallet est adapt√©/non adapt√© au copy trading car..."
}`;

    console.log('üåê [ANALYZE WALLET] Envoi vers OpenAI...');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en analyse de copy trading crypto sur Solana. Tu r√©ponds UNIQUEMENT avec du JSON valide, sans formatage markdown ni texte additionnel. Sois strict dans tes crit√®res et pr√©cis dans ton scoring.'
          },
          {
            role: 'user',
            content: analysisPrompt
          }
        ],
        temperature: 0.2, // Plus d√©terministe pour l'analyse
        max_tokens: 1200
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [ANALYZE WALLET] Erreur API OpenAI:', response.status, errorText);
      throw new Error(`Erreur API OpenAI: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ [ANALYZE WALLET] R√©ponse OpenAI re√ßue');

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('R√©ponse OpenAI invalide');
    }

    const analysisText = data.choices[0].message.content.trim();
    console.log('üìù [ANALYZE WALLET] Texte d\'analyse:', analysisText.substring(0, 200) + '...');

    // Parser la r√©ponse JSON
    let analysisResult;
    try {
      // Nettoyer le texte au cas o√π il y aurait du markdown
      const cleanText = analysisText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      analysisResult = JSON.parse(cleanText);
      
      // Validation de la structure
      if (!analysisResult.copyTradingScore || !analysisResult.recommendation) {
        throw new Error('Structure de r√©ponse invalide');
      }
      
      console.log('‚úÖ [ANALYZE WALLET] Analyse pars√©e avec succ√®s');
      console.log(`üéØ [ANALYZE WALLET] Score: ${analysisResult.copyTradingScore}/100, Recommandation: ${analysisResult.recommendation}`);
      
    } catch (parseError) {
      console.error('‚ùå [ANALYZE WALLET] Erreur parsing JSON:', parseError);
      console.error('üìÑ [ANALYZE WALLET] R√©ponse brute:', analysisText);
      
      // Fallback analysis stricte si le parsing √©choue
      analysisResult = {
        copyTradingScore: 30,
        recommendation: "üî¥",
        recommendationText: "√† √©viter",
        explanation: "Analyse automatique √©chou√©e. Les donn√©es sont insuffisantes pour une √©valuation copy trading fiable.",
        criteriaAnalysis: {
          winRateScore: 0,
          antiBot: false,
          positionSizing: "unknown",
          tokenStrategy: "unknown", 
          practicalCopyTrading: "difficult"
        },
        strengths: ["Donn√©es collect√©es"],
        weaknesses: ["Analyse incompl√®te", "Donn√©es insuffisantes"],
        recommendations: ["Revoir les donn√©es du wallet", "Analyser sur une p√©riode plus longue"],
        copyTradingViability: "Ce wallet ne peut pas √™tre √©valu√© correctement pour le copy trading en raison de donn√©es insuffisantes."
      };
    }

    // Ajouter des m√©tadonn√©es
    analysisResult.metadata = {
      analyzedAt: new Date().toISOString(),
      walletAddress: walletAddress,
      dataSource: 'openai_gpt4o_mini',
      criteriaVersion: 'solana_copy_trading_v1',
      tokensAnalyzed: walletData.tokens?.length || 0,
      analysisVersion: '2.0'
    };

    console.log('üéä [ANALYZE WALLET] Analyse termin√©e avec succ√®s');

    return new Response(JSON.stringify(analysisResult), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });

  } catch (error) {
    console.error('üí• [ANALYZE WALLET] Erreur:', error.message);
    
    // R√©ponse d'erreur avec structure standard
    const errorResponse = {
      copyTradingScore: 0,
      recommendation: "üî¥",
      recommendationText: "erreur",
      explanation: `Erreur lors de l'analyse: ${error.message}. Impossible d'√©valuer ce wallet pour le copy trading.`,
      criteriaAnalysis: {
        winRateScore: 0,
        antiBot: false,
        positionSizing: "error",
        tokenStrategy: "error",
        practicalCopyTrading: "impossible"
      },
      strengths: [],
      weaknesses: ["Erreur d'analyse"],
      recommendations: ["R√©essayer l'analyse", "V√©rifier les donn√©es du wallet"],
      copyTradingViability: "Ce wallet ne peut pas √™tre analys√© en raison d'une erreur technique.",
      metadata: {
        error: error.message,
        analyzedAt: new Date().toISOString(),
        analysisVersion: '2.0'
      }
    };

    return new Response(JSON.stringify(errorResponse), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
});
