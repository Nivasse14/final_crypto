#!/usr/bin/env node

// üîç V√©rification des m√©triques Cielo en base de donn√©es
// Ce script v√©rifie que les m√©triques ont √©t√© correctement sauvegard√©es

const SUPABASE_URL = 'https://xkndddxqqlxqknbqtefv.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhrbmRkZHhxcWx4cWtuYnF0ZWZ2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwMTY3MTEsImV4cCI6MjA2ODU5MjcxMX0.1JfLmuXhKZLhSpIVkoubfaaE9M1jAANoPjKcXZTgPgU';

const TEST_WALLET = "ABdAsGjQv1bLLvzgcqEWJmAuwNbUJyfNUausyTVe7STB";

console.log('üîç V√âRIFICATION M√âTRIQUES CIELO EN BASE');
console.log('======================================');

async function checkCieloMetrics() {
  try {
    console.log(`üì° V√©rification des m√©triques pour ${TEST_WALLET}...`);
    
    // R√©cup√©rer le wallet avec toutes les nouvelles colonnes
    const response = await fetch(`${SUPABASE_URL}/rest/v1/wallet_registry?wallet_address=eq.${TEST_WALLET}&select=wallet_address,average_holding_time,total_pnl,winrate,total_roi_percentage,swap_count,first_swap_timestamp,last_swap_timestamp,unique_trading_days,consecutive_trading_days,average_trades_per_token,total_tokens_traded,total_unrealized_pnl_usd,total_unrealized_roi_percentage,combined_pnl_usd,combined_roi_percentage,combined_average_hold_time,combined_median_hold_time`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    if (data.length === 0) {
      console.log('‚ùå Wallet non trouv√© en base de donn√©es');
      return;
    }
    
    const wallet = data[0];
    console.log('‚úÖ Wallet trouv√© en base de donn√©es\n');
    
    console.log('üìä V√âRIFICATION DES NOUVELLES M√âTRIQUES:');
    console.log('=========================================');
    
    const metricsToCheck = [
      { key: 'average_holding_time', label: 'Temps de d√©tention moyen (h)', format: (v) => v ? `${parseFloat(v).toFixed(2)}h` : 'null' },
      { key: 'total_pnl', label: 'PnL total (USD)', format: (v) => v ? `$${parseFloat(v).toFixed(2)}` : 'null' },
      { key: 'winrate', label: 'Taux de r√©ussite (%)', format: (v) => v ? `${(parseFloat(v) * 100).toFixed(1)}%` : 'null' },
      { key: 'total_roi_percentage', label: 'ROI total (%)', format: (v) => v ? `${parseFloat(v).toFixed(1)}%` : 'null' },
      { key: 'swap_count', label: 'Nombre de swaps', format: (v) => v || 'null' },
      { key: 'first_swap_timestamp', label: 'Premier swap', format: (v) => v ? new Date(v).toLocaleDateString() : 'null' },
      { key: 'last_swap_timestamp', label: 'Dernier swap', format: (v) => v ? new Date(v).toLocaleDateString() : 'null' },
      { key: 'unique_trading_days', label: 'Jours de trading uniques', format: (v) => v || 'null' },
      { key: 'consecutive_trading_days', label: 'Jours cons√©cutifs', format: (v) => v || 'null' },
      { key: 'average_trades_per_token', label: 'Trades par token (moy.)', format: (v) => v ? parseFloat(v).toFixed(1) : 'null' },
      
      // === NOUVELLES M√âTRIQUES PNL_DATA ===
      { key: 'total_tokens_traded', label: 'Total tokens trad√©s', format: (v) => v || 'null' },
      { key: 'total_unrealized_pnl_usd', label: 'PnL non r√©alis√© (USD)', format: (v) => v ? `$${parseFloat(v).toFixed(2)}` : 'null' },
      { key: 'total_unrealized_roi_percentage', label: 'ROI non r√©alis√© (%)', format: (v) => v ? `${parseFloat(v).toFixed(1)}%` : 'null' },
      { key: 'combined_pnl_usd', label: 'PnL combin√© (USD)', format: (v) => v ? `$${parseFloat(v).toFixed(2)}` : 'null' },
      { key: 'combined_roi_percentage', label: 'ROI combin√© (%)', format: (v) => v ? `${parseFloat(v).toFixed(1)}%` : 'null' },
      { key: 'combined_average_hold_time', label: 'Temps d√©tention combin√© (h)', format: (v) => v ? `${parseFloat(v).toFixed(1)}h` : 'null' },
      { key: 'combined_median_hold_time', label: 'Temps d√©tention m√©dian (h)', format: (v) => v ? `${parseFloat(v).toFixed(1)}h` : 'null' }
    ];
    
    let filledCount = 0;
    let totalCount = metricsToCheck.length;
    
    metricsToCheck.forEach(metric => {
      const value = wallet[metric.key];
      const isSet = value !== null && value !== undefined;
      const status = isSet ? '‚úÖ' : '‚ùå';
      const formattedValue = metric.format(value);
      
      console.log(`   ${status} ${metric.label}: ${formattedValue}`);
      
      if (isSet) filledCount++;
    });
    
    console.log(`\nüìà SCORE DE PR√âSENCE: ${filledCount}/${totalCount} (${((filledCount/totalCount)*100).toFixed(1)}%)`);
    
    if (filledCount === totalCount) {
      console.log('üéâ PARFAIT ! Toutes les m√©triques sont remplies !');
    } else if (filledCount >= totalCount * 0.8) {
      console.log('üëç TR√àS BIEN ! La plupart des m√©triques sont remplies');
    } else if (filledCount >= totalCount * 0.5) {
      console.log('üëå CORRECT ! La moiti√© des m√©triques sont remplies');
    } else {
      console.log('‚ö†Ô∏è INSUFFISANT ! Peu de m√©triques sont remplies');
    }
    
    // Comparaison avec les anciennes m√©triques s'il y en a
    console.log('\nüîÑ COMPARAISON AVEC ANCIENNES M√âTRIQUES:');
    console.log('========================================');
    
    const oldMetricsResponse = await fetch(`${SUPABASE_URL}/rest/v1/wallet_registry?wallet_address=eq.${TEST_WALLET}&select=total_pnl_usd,roi,profit_percentage`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    if (oldMetricsResponse.ok) {
      const oldData = await oldMetricsResponse.json();
      if (oldData.length > 0) {
        const oldWallet = oldData[0];
        console.log(`   Ancien PnL: $${oldWallet.total_pnl_usd || 'N/A'} ‚Üí Nouveau: $${parseFloat(wallet.total_pnl || 0).toFixed(2)}`);
        console.log(`   Ancien ROI: ${oldWallet.roi || 'N/A'}% ‚Üí Nouveau: ${parseFloat(wallet.total_roi_percentage || 0).toFixed(1)}%`);
      }
    }
    
    console.log('\n‚úÖ V√âRIFICATION TERMIN√âE !');
    
  } catch (error) {
    console.log(`‚ùå Erreur: ${error.message}`);
  }
}

checkCieloMetrics();
