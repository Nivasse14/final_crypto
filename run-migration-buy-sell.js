#!/usr/bin/env node

// üîß Ex√©cution automatique de la migration pour les m√©triques d'achat/vente
// Ce script ex√©cute la migration SQL via l'API Supabase

const SUPABASE_URL = 'https://xkndddxqqlxqknbqtefv.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhrbmRkZHhxcWx4cWtuYnF0ZWZ2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwMTY3MTEsImV4cCI6MjA2ODU5MjcxMX0.1JfLmuXhKZLhSpIVkoubfaaE9M1jAANoPjKcXZTgPgU';

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß MIGRATION M√âTRIQUES ACHAT/VENTE');
console.log('==================================');

async function runMigration() {
  try {
    // Lire le fichier de migration
    const migrationPath = path.join(__dirname, 'migration-add-buy-sell-metrics.sql');
    console.log(`üìÑ Lecture du fichier: ${migrationPath}`);
    
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`Fichier de migration non trouv√©: ${migrationPath}`);
    }
    
    const sqlContent = fs.readFileSync(migrationPath, 'utf8');
    console.log(`‚úÖ Fichier lu (${sqlContent.length} caract√®res)`);
    
    // Extraire les commandes ALTER TABLE (ignorer les commentaires et SELECT)
    const lines = sqlContent.split('\n');
    const alterCommands = [];
    
    let currentCommand = '';
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // Ignorer les commentaires, lignes vides et SELECT
      if (trimmedLine.startsWith('--') || 
          trimmedLine === '' || 
          trimmedLine.startsWith('COMMENT') ||
          trimmedLine.startsWith('SELECT')) {
        continue;
      }
      
      currentCommand += line + '\n';
      
      // Si la ligne se termine par ;, c'est la fin d'une commande
      if (trimmedLine.endsWith(';')) {
        alterCommands.push(currentCommand.trim());
        currentCommand = '';
      }
    }
    
    console.log(`üìù ${alterCommands.length} commandes ALTER TABLE trouv√©es`);
    
    // Ex√©cuter chaque commande ALTER TABLE
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < alterCommands.length; i++) {
      const command = alterCommands[i];
      console.log(`\nüîÑ Ex√©cution commande ${i + 1}/${alterCommands.length}:`);
      console.log(`   ${command.substring(0, 80)}...`);
      
      try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
            'apikey': SUPABASE_ANON_KEY,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ sql: command })
        });
        
        if (response.ok) {
          console.log(`   ‚úÖ Succ√®s`);
          successCount++;
        } else {
          const errorText = await response.text();
          console.log(`   ‚ö†Ô∏è Erreur HTTP ${response.status}: ${errorText}`);
          
          // Les erreurs "column already exists" sont normales
          if (errorText.includes('already exists') || errorText.includes('duplicate column')) {
            console.log(`   ‚ÑπÔ∏è Colonne d√©j√† existante (normal)`);
            successCount++;
          } else {
            errorCount++;
          }
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erreur: ${error.message}`);
        errorCount++;
      }
      
      // D√©lai entre les commandes
      if (i < alterCommands.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    
    // Rapport final
    console.log(`\nüìä RAPPORT MIGRATION:`);
    console.log(`‚îú‚îÄ‚îÄ Commandes ex√©cut√©es: ${alterCommands.length}`);
    console.log(`‚îú‚îÄ‚îÄ Succ√®s: ${successCount}`);
    console.log(`‚îú‚îÄ‚îÄ Erreurs: ${errorCount}`);
    console.log(`‚îî‚îÄ‚îÄ Statut: ${errorCount === 0 ? '‚úÖ MIGRATION R√âUSSIE' : '‚ö†Ô∏è MIGRATION PARTIELLE'}`);
    
    return { success: errorCount === 0, successCount, errorCount };
    
  } catch (error) {
    console.log(`‚ùå Erreur migration: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// V√©rifier les colonnes apr√®s migration
async function verifyColumns() {
  try {
    console.log(`\nüîç V√âRIFICATION DES COLONNES:`);
    
    const columnsToCheck = [
      'average_buy_amount_usd', 'minimum_buy_amount_usd', 'maximum_buy_amount_usd',
      'total_buy_amount_usd', 'total_buy_count',
      'average_sell_amount_usd', 'minimum_sell_amount_usd', 'maximum_sell_amount_usd',
      'total_sell_amount_usd', 'total_sell_count'
    ];
    
    const columnsList = columnsToCheck.map(col => `'${col}'`).join(',');
    const query = `select=column_name,data_type&table_name=eq.wallet_registry&column_name=in.(${columnsList})`;
    
    const response = await fetch(`${SUPABASE_URL}/rest/v1/information_schema.columns?${query}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Erreur v√©rification: ${response.status}`);
    }
    
    const columns = await response.json();
    console.log(`üìã Colonnes trouv√©es: ${columns.length}/${columnsToCheck.length}`);
    
    const foundColumns = columns.map(col => col.column_name);
    const missingColumns = columnsToCheck.filter(col => !foundColumns.includes(col));
    
    if (missingColumns.length === 0) {
      console.log(`‚úÖ Toutes les colonnes sont pr√©sentes !`);
    } else {
      console.log(`‚ö†Ô∏è Colonnes manquantes: ${missingColumns.join(', ')}`);
    }
    
    // Afficher les colonnes pr√©sentes
    columns.forEach(col => {
      console.log(`   ‚úì ${col.column_name} (${col.data_type})`);
    });
    
    return { success: missingColumns.length === 0, found: foundColumns.length, missing: missingColumns };
    
  } catch (error) {
    console.log(`‚ùå Erreur v√©rification: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// Fonction principale
async function main() {
  console.log(`D√©marrage de la migration...\n`);
  
  // 1. Ex√©cuter la migration
  const migrationResult = await runMigration();
  
  // 2. V√©rifier les colonnes
  const verifyResult = await verifyColumns();
  
  // 3. Rapport final
  console.log(`\nüéØ R√âSULTAT FINAL:`);
  if (migrationResult.success && verifyResult.success) {
    console.log(`‚úÖ MIGRATION COMPL√àTE ET V√âRIFI√âE`);
    console.log(`üìä ${verifyResult.found} nouvelles colonnes disponibles`);
    console.log(`\nüöÄ Vous pouvez maintenant lancer:`);
    console.log(`   node enrich-cielo-metrics.js test ABdAsGjQv1bLLvzgcqEWJmAuwNbUJyfNUausyTVe7STB`);
  } else {
    console.log(`‚ö†Ô∏è MIGRATION INCOMPL√àTE`);
    if (!migrationResult.success) {
      console.log(`   Erreur migration: ${migrationResult.error || 'Commandes en √©chec'}`);
    }
    if (!verifyResult.success) {
      console.log(`   Erreur v√©rification: ${verifyResult.error || 'Colonnes manquantes'}`);
    }
  }
}

// Ex√©cution
main().catch(console.error);
