#!/usr/bin/env node

// üéØ ANALYSE FINALE ET RECOMMANDATIONS
// Synth√®se compl√®te des colonnes non utilis√©es dans wallet_registry

import fs from 'fs';

function generateFinalRecommendations() {
  console.log('üéØ ANALYSE FINALE - COLONNES NON UTILIS√âES WALLET_REGISTRY');
  console.log('=========================================================\n');
  
  // Cat√©gories de colonnes identifi√©es
  const analysis = {
    // Colonnes S√õRES √† supprimer (11 colonnes)
    safeToRemove: [
      {
        category: 'Volume Metrics (PnL)',
        columns: [
          'pnl_total_volume_24h_usd',
          'pnl_avg_volume_24h_usd', 
          'pnl_tokens_with_volume_data'
        ],
        reason: 'M√©triques de volume calcul√©es non maintenues, uniquement en lecture'
      },
      {
        category: 'Volume Metrics (Portfolio)',
        columns: [
          'portfolio_total_volume_24h_usd',
          'portfolio_avg_volume_24h_usd',
          'portfolio_tokens_with_volume_data'
        ],
        reason: 'M√©triques de volume portfolio calcul√©es non maintenues, uniquement en lecture'
      },
      {
        category: 'ROI Distribution',
        columns: [
          'roi_50_to_200',
          'roi_0_to_50', 
          'roi_total_trades',
          'roi_winning_trades',
          'roi_losing_trades'
        ],
        reason: 'Distribution ROI calcul√©es obsol√®tes, jamais mises √† jour'
      }
    ],
    
    // Colonnes √Ä REVIEW (4 colonnes)
    reviewNeeded: [
      {
        category: 'Dune Legacy',
        columns: ['dune_mroi', 'dune_invalids'],
        reason: 'Anciennes m√©triques Dune, potentiellement obsol√®tes mais √† v√©rifier'
      },
      {
        category: 'Advanced Analytics',
        columns: ['streak_wins_max_90d', 'streak_losses_max_90d'],
        reason: 'M√©triques avanc√©es qui pourraient √™tre utilis√©es dans des analyses futures'
      }
    ],
    
    // Colonnes POTENTIELLEMENT obsol√®tes (n√©cessitent investigation)
    potentiallyObsolete: [
      {
        category: 'Dune API Legacy',
        columns: [
          'dune_wallet_pnl', 'dune_total_bought_usd', 'dune_total_pnl_usd', 
          'dune_roi', 'dune_tokens', 'dune_nosells', 'dune_losses', 'dune_nulls', 
          'dune_wins', 'dune_winrate', 'dune_w2x', 'dune_w10x', 'dune_w100x', 
          'dune_scalps', 'dune_scalp_ratio', 'dune_bal', 'dune_bal_ratio', 
          'dune_last_trade', 'dune_trade_days'
        ],
        reason: 'API Dune potentiellement obsol√®te - v√©rifier si encore utilis√©e'
      },
      {
        category: 'External URLs',
        columns: ['solscan_url', 'gmgn_url', 'cielo_url', 'wallet_pnl_link'],
        reason: 'URLs externes souvent non maintenues, peuvent √™tre reconstruites dynamiquement'
      }
    ]
  };
  
  // Affichage des r√©sultats
  displayAnalysis(analysis);
  
  // G√©n√©ration des scripts SQL
  generateFinalSQL(analysis);
  
  return analysis;
}

function displayAnalysis(analysis) {
  console.log('‚úÖ COLONNES S√õRES √Ä SUPPRIMER (11 colonnes):');
  console.log('============================================');
  analysis.safeToRemove.forEach(group => {
    console.log(`\nüì¶ ${group.category}:`);
    group.columns.forEach(col => {
      console.log(`   üóëÔ∏è  ${col}`);
    });
    console.log(`   ‚Üí ${group.reason}`);
  });
  
  const totalSafe = analysis.safeToRemove.reduce((sum, group) => sum + group.columns.length, 0);
  console.log(`\nüìä Total colonnes s√ªres: ${totalSafe} colonnes`);
  
  console.log('\n‚ö†Ô∏è  COLONNES √Ä EXAMINER (4 colonnes):');
  console.log('====================================');
  analysis.reviewNeeded.forEach(group => {
    console.log(`\nüìã ${group.category}:`);
    group.columns.forEach(col => {
      console.log(`   üîç ${col}`);
    });
    console.log(`   ‚Üí ${group.reason}`);
  });
  
  console.log('\nü§î COLONNES POTENTIELLEMENT OBSOL√àTES:');
  console.log('======================================');
  analysis.potentiallyObsolete.forEach(group => {
    console.log(`\nüìÇ ${group.category} (${group.columns.length} colonnes):`);
    console.log(`   ${group.columns.slice(0, 5).join(', ')}${group.columns.length > 5 ? '...' : ''}`);
    console.log(`   ‚Üí ${group.reason}`);
  });
}

function generateFinalSQL(analysis) {
  console.log('\nüìù G√âN√âRATION DES SCRIPTS SQL FINAUX:');
  console.log('====================================\n');
  
  // 1. Script pour colonnes s√ªres
  const safeColumns = analysis.safeToRemove.flatMap(group => group.columns);
  const safeSQL = generateSafeRemovalSQL(safeColumns);
  fs.writeFileSync('FINAL-drop-safe-columns.sql', safeSQL);
  console.log(`‚úÖ Script s√ªr g√©n√©r√©: FINAL-drop-safe-columns.sql (${safeColumns.length} colonnes)`);
  
  // 2. Script pour examiner les donn√©es
  const examineSQL = generateExaminationSQL(analysis);
  fs.writeFileSync('FINAL-examine-data.sql', examineSQL);
  console.log(`üîç Script d'examen: FINAL-examine-data.sql`);
  
  // 3. Script pour colonnes n√©cessitant review
  const reviewColumns = analysis.reviewNeeded.flatMap(group => group.columns);
  const reviewSQL = generateReviewRemovalSQL(reviewColumns);
  fs.writeFileSync('FINAL-drop-review-columns.sql', reviewSQL);
  console.log(`‚ö†Ô∏è  Script review: FINAL-drop-review-columns.sql (${reviewColumns.length} colonnes)`);
  
  // 4. Script pour investigation Dune/URLs
  const investigateSQL = generateInvestigationSQL(analysis.potentiallyObsolete);
  fs.writeFileSync('FINAL-investigate-columns.sql', investigateSQL);
  console.log(`üïµÔ∏è  Script investigation: FINAL-investigate-columns.sql`);
  
  console.log('\nüìã PLAN D\'EX√âCUTION RECOMMAND√â:');
  console.log('===============================');
  console.log('1. Ex√©cuter FINAL-examine-data.sql pour voir les donn√©es');
  console.log('2. Si les donn√©es semblent vides/obsol√®tes, ex√©cuter FINAL-drop-safe-columns.sql');
  console.log('3. Examiner FINAL-investigate-columns.sql pour les colonnes Dune/URLs');
  console.log('4. Apr√®s review manuelle, utiliser FINAL-drop-review-columns.sql si n√©cessaire');
  console.log('5. Tester l\'application apr√®s chaque suppression');
}

function generateSafeRemovalSQL(columns) {
  let sql = '-- üóëÔ∏è  SUPPRESSION S√õRE - Colonnes non utilis√©es identifi√©es\n';
  sql += '-- ===================================================\n';
  sql += `-- Date: ${new Date().toISOString()}\n`;
  sql += `-- Colonnes √† supprimer: ${columns.length}\n`;
  sql += '-- ‚ö†Ô∏è  SAUVEGARDE OBLIGATOIRE avant ex√©cution !\n\n';
  
  sql += '-- √âTAPE 1: Sauvegarde de s√©curit√©\n';
  sql += 'CREATE TABLE wallet_registry_backup_' + new Date().toISOString().slice(0,10).replace(/-/g, '') + ' AS \n';
  sql += 'SELECT * FROM wallet_registry;\n\n';
  
  sql += '-- √âTAPE 2: V√©rification des colonnes avant suppression\n';
  sql += 'SELECT \n';
  sql += '  COUNT(*) as total_rows,\n';
  sql += '  COUNT(*) FILTER (WHERE ' + columns.map(col => `${col} IS NOT NULL`).join(' OR ') + ') as rows_with_data\n';
  sql += 'FROM wallet_registry;\n\n';
  
  sql += '-- √âTAPE 3: Suppression des colonnes s√ªres\n';
  sql += '-- (Colonnes uniquement en lecture, jamais mises √† jour)\n\n';
  
  // Grouper par cat√©gorie
  const volumePnl = columns.filter(col => col.startsWith('pnl_') && col.includes('volume'));
  const volumePortfolio = columns.filter(col => col.startsWith('portfolio_') && col.includes('volume'));
  const roiDistrib = columns.filter(col => col.startsWith('roi_') && !col.includes('percentage') && !col.includes('pct'));
  
  if (volumePnl.length > 0) {
    sql += '-- Volume metrics PnL (non maintenues)\n';
    volumePnl.forEach(col => {
      sql += `ALTER TABLE wallet_registry DROP COLUMN IF EXISTS ${col};\n`;
    });
    sql += '\n';
  }
  
  if (volumePortfolio.length > 0) {
    sql += '-- Volume metrics Portfolio (non maintenues)\n';
    volumePortfolio.forEach(col => {
      sql += `ALTER TABLE wallet_registry DROP COLUMN IF EXISTS ${col};\n`;
    });
    sql += '\n';
  }
  
  if (roiDistrib.length > 0) {
    sql += '-- ROI Distribution (obsol√®tes)\n';
    roiDistrib.forEach(col => {
      sql += `ALTER TABLE wallet_registry DROP COLUMN IF EXISTS ${col};\n`;
    });
    sql += '\n';
  }
  
  sql += '-- √âTAPE 4: V√©rification post-suppression\n';
  sql += 'SELECT \n';
  sql += '  table_name,\n';
  sql += '  COUNT(*) as colonnes_restantes\n';
  sql += 'FROM information_schema.columns \n';
  sql += 'WHERE table_name = \'wallet_registry\' \n';
  sql += 'GROUP BY table_name;\n\n';
  
  sql += 'SELECT \'‚úÖ Suppression des colonnes s√ªres termin√©e!\' as status;\n';
  
  return sql;
}

function generateExaminationSQL(analysis) {
  const allColumns = [
    ...analysis.safeToRemove.flatMap(group => group.columns),
    ...analysis.reviewNeeded.flatMap(group => group.columns)
  ];
  
  let sql = '-- üîç EXAMEN DES DONN√âES - Colonnes candidates √† la suppression\n';
  sql += '-- ========================================================\n';
  sql += `-- Date: ${new Date().toISOString()}\n\n`;
  
  sql += '-- Vue d\'ensemble g√©n√©rale\n';
  sql += 'SELECT \n';
  sql += '  COUNT(*) as total_wallets,\n';
  sql += '  MAX(updated_at) as derniere_mise_a_jour,\n';
  sql += '  MIN(created_at) as premiere_creation\n';
  sql += 'FROM wallet_registry;\n\n';
  
  sql += '-- Analyse d√©taill√©e par colonne\n';
  allColumns.forEach(column => {
    sql += `-- ${column}\n`;
    sql += `SELECT \n`;
    sql += `  '${column}' as colonne,\n`;
    sql += `  COUNT(*) as total_rows,\n`;
    sql += `  COUNT(${column}) as non_null,\n`;
    sql += `  COUNT(DISTINCT ${column}) as valeurs_distinctes,\n`;
    sql += `  ROUND(COUNT(${column})::numeric / COUNT(*) * 100, 1) as pourcentage_rempli\n`;
    sql += `FROM wallet_registry;\n\n`;
  });
  
  sql += '-- R√©sum√© global des colonnes candidates\n';
  sql += 'SELECT \n';
  sql += '  \'Colonnes candidates\' as type,\n';
  sql += '  COUNT(*) as wallets_avec_donnees\n';
  sql += 'FROM wallet_registry \n';
  sql += 'WHERE (\n';
  sql += allColumns.map(col => `  ${col} IS NOT NULL`).join(' OR\n');
  sql += '\n);\n';
  
  return sql;
}

function generateReviewRemovalSQL(columns) {
  let sql = '-- ‚ö†Ô∏è  SUPPRESSION APR√àS REVIEW - Colonnes √† examiner manuellement\n';
  sql += '-- =============================================================\n';
  sql += '-- ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è ATTENTION: REVIEW MANUELLE OBLIGATOIRE !\n';
  sql += `-- Date: ${new Date().toISOString()}\n\n`;
  
  sql += '-- √âTAPE 1: Examiner les donn√©es de ces colonnes\n';
  columns.forEach(col => {
    sql += `SELECT '${col}' as colonne, COUNT(*) as total, COUNT(${col}) as rempli, `;
    sql += `COUNT(DISTINCT ${col}) as distincts FROM wallet_registry;\n`;
  });
  
  sql += '\n-- √âTAPE 2: Si les donn√©es sont obsol√®tes, d√©commentez ci-dessous\n\n';
  
  sql += '-- Sauvegarder avant suppression\n';
  sql += '-- CREATE TABLE wallet_registry_review_backup AS SELECT * FROM wallet_registry;\n\n';
  
  sql += '-- Supprimer les colonnes (d√©commentez si n√©cessaire)\n';
  columns.forEach(col => {
    sql += `-- ALTER TABLE wallet_registry DROP COLUMN IF EXISTS ${col};\n`;
  });
  
  return sql;
}

function generateInvestigationSQL(potentiallyObsolete) {
  let sql = '-- üïµÔ∏è  INVESTIGATION - Colonnes potentiellement obsol√®tes\n';
  sql += '-- =====================================================\n';
  sql += `-- Date: ${new Date().toISOString()}\n\n`;
  
  potentiallyObsolete.forEach(group => {
    sql += `-- ${group.category}\n`;
    sql += '-- ' + '='.repeat(group.category.length) + '\n\n';
    
    if (group.category.includes('Dune')) {
      sql += '-- V√©rifier si les donn√©es Dune sont encore mises √† jour\n';
      sql += 'SELECT \n';
      sql += '  COUNT(*) as total_wallets,\n';
      sql += '  COUNT(*) FILTER (WHERE ' + group.columns.slice(0,5).map(col => `${col} IS NOT NULL`).join(' OR ') + ') as with_dune_data,\n';
      sql += '  MAX(updated_at) as last_update\n';
      sql += 'FROM wallet_registry;\n\n';
      
      sql += '-- √âchantillon de donn√©es Dune\n';
      sql += 'SELECT \n';
      sql += '  wallet_address,\n';
      sql += '  ' + group.columns.slice(0,5).join(',\n  ') + '\n';
      sql += 'FROM wallet_registry \n';
      sql += 'WHERE ' + group.columns.slice(0,5).map(col => `${col} IS NOT NULL`).join(' OR ') + '\n';
      sql += 'LIMIT 5;\n\n';
      
    } else if (group.category.includes('URL')) {
      sql += '-- V√©rifier les URLs externes\n';
      sql += 'SELECT \n';
      sql += '  COUNT(*) as total_wallets,\n';
      sql += group.columns.map(col => `  COUNT(${col}) as ${col}_count`).join(',\n') + '\n';
      sql += 'FROM wallet_registry;\n\n';
      
      sql += '-- Note: Les URLs peuvent souvent √™tre reconstruites dynamiquement\n';
      sql += '-- Exemple: https://solscan.io/account/{wallet_address}\n\n';
    }
  });
  
  sql += '-- RECOMMANDATIONS:\n';
  sql += '-- 1. Si les donn√©es Dune ne sont plus mises √† jour ‚Üí Supprimer\n';
  sql += '-- 2. Si les URLs peuvent √™tre reconstruites ‚Üí Supprimer\n';
  sql += '-- 3. Tester l\'application apr√®s chaque changement\n';
  
  return sql;
}

// Ex√©cution principale
const finalAnalysis = generateFinalRecommendations();

// Sauvegarder le rapport final
const finalReport = {
  timestamp: new Date().toISOString(),
  summary: {
    safeToRemove: finalAnalysis.safeToRemove.reduce((sum, group) => sum + group.columns.length, 0),
    reviewNeeded: finalAnalysis.reviewNeeded.reduce((sum, group) => sum + group.columns.length, 0),
    potentiallyObsolete: finalAnalysis.potentiallyObsolete.reduce((sum, group) => sum + group.columns.length, 0),
    totalCandidates: finalAnalysis.safeToRemove.reduce((sum, group) => sum + group.columns.length, 0) +
                    finalAnalysis.reviewNeeded.reduce((sum, group) => sum + group.columns.length, 0)
  },
  analysis: finalAnalysis,
  recommendations: [
    'Commencer par les 11 colonnes s√ªres √† supprimer',
    'Examiner les 4 colonnes n√©cessitant une review',
    'Investiguer les colonnes Dune si l\'API n\'est plus utilis√©e',
    'Consid√©rer la suppression des URLs externes si elles peuvent √™tre reconstruites',
    'Tester apr√®s chaque suppression',
    'Garder une sauvegarde compl√®te'
  ]
};

fs.writeFileSync('FINAL-column-analysis-report.json', JSON.stringify(finalReport, null, 2));
console.log('\nüíæ Rapport final sauvegard√©: FINAL-column-analysis-report.json');

console.log('\nüéØ R√âSUM√â EX√âCUTIF:');
console.log('==================');
console.log(`üìä ${finalReport.summary.totalCandidates} colonnes peuvent √™tre supprim√©es au total`);
console.log(`‚úÖ ${finalReport.summary.safeToRemove} colonnes sont s√ªres √† supprimer imm√©diatement`);
console.log(`‚ö†Ô∏è  ${finalReport.summary.reviewNeeded} colonnes n√©cessitent une review manuelle`);
console.log(`üîç ${finalReport.summary.potentiallyObsolete} colonnes suppl√©mentaires √† investiguer`);

export default finalAnalysis;