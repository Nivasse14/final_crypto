#!/bin/bash

# Script de validation finale de l'endpoint GeckoTerminal API Test
# Validation de tous les aspects : performance, structure, donn√©es, gestion d'erreurs

set -e

# Configuration
BASE_URL="https://xkndddxqqlxqknbqtefv.supabase.co/functions/v1/cielo-api"
AUTH_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhrbmRkZHhxcWx4cWtuYnF0ZWZ2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU5MDQwNzMsImV4cCI6MjA1MTQ4MDA3M30.lP7_dkwlSjTzlwcJy6VBPmDNEy_nCVS-nQ-8cQKW5gU"
HEADERS=(-H "Authorization: Bearer $AUTH_TOKEN" -H "Content-Type: application/json")

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}ü¶é VALIDATION FINALE - GeckoTerminal API Test Endpoint${NC}"
echo "==========================================================="
echo

# Test 1: Validation de la structure de r√©ponse
echo -e "${BLUE}üìã Test 1: Structure de R√©ponse${NC}"
response=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/networks")

# V√©rifier les champs obligatoires
required_fields=("success" "test_type" "description" "endpoint_tested" "full_url" "response_analysis" "data_preview" "raw_response" "timestamp")
all_present=true

for field in "${required_fields[@]}"; do
    value=$(echo "$response" | jq -r ".$field // null")
    if [ "$value" = "null" ]; then
        echo -e "   ${RED}‚ùå Champ manquant: $field${NC}"
        all_present=false
    else
        echo -e "   ${GREEN}‚úÖ $field${NC}"
    fi
done

if [ "$all_present" = true ]; then
    echo -e "${GREEN}‚úÖ Structure de r√©ponse compl√®te${NC}"
else
    echo -e "${RED}‚ùå Structure de r√©ponse incompl√®te${NC}"
fi
echo

# Test 2: Validation de l'analyse de r√©ponse
echo -e "${BLUE}üìä Test 2: Analyse de R√©ponse${NC}"
duration=$(echo "$response" | jq -r '.response_analysis.duration_ms')
data_count=$(echo "$response" | jq -r '.response_analysis.data_count')
has_data=$(echo "$response" | jq -r '.response_analysis.has_data')

if [ "$duration" != "null" ] && [ "$data_count" != "null" ] && [ "$has_data" = "true" ]; then
    echo -e "   ${GREEN}‚úÖ Analyse de performance: ${duration}ms${NC}"
    echo -e "   ${GREEN}‚úÖ Comptage de donn√©es: ${data_count} items${NC}"
    echo -e "   ${GREEN}‚úÖ Pr√©sence de donn√©es: ${has_data}${NC}"
else
    echo -e "   ${RED}‚ùå Analyse de r√©ponse d√©faillante${NC}"
fi
echo

# Test 3: Validation des donn√©es enrichies (Token)
echo -e "${BLUE}üí∞ Test 3: Donn√©es Token Enrichies${NC}"
token_response=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/token/25PwuUsuJ4PHtZ4TCprvmrVkbNQNvYuWj1CZd2xqbonk/solana")

token_name=$(echo "$token_response" | jq -r '.raw_response.data.attributes.name')
token_symbol=$(echo "$token_response" | jq -r '.raw_response.data.attributes.symbol')
token_price=$(echo "$token_response" | jq -r '.raw_response.data.attributes.price_usd')
token_decimals=$(echo "$token_response" | jq -r '.raw_response.data.attributes.decimals')

if [ "$token_name" != "null" ] && [ "$token_symbol" != "null" ] && [ "$token_price" != "null" ]; then
    echo -e "   ${GREEN}‚úÖ Nom: $token_name${NC}"
    echo -e "   ${GREEN}‚úÖ Symbol: $token_symbol${NC}"
    echo -e "   ${GREEN}‚úÖ Prix: \$${token_price}${NC}"
    echo -e "   ${GREEN}‚úÖ Decimals: $token_decimals${NC}"
else
    echo -e "   ${RED}‚ùå Donn√©es token incompl√®tes${NC}"
fi
echo

# Test 4: Validation des pools et DEX
echo -e "${BLUE}üèä Test 4: Donn√©es Pools et DEX${NC}"
pools_response=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/pools/25PwuUsuJ4PHtZ4TCprvmrVkbNQNvYuWj1CZd2xqbonk/solana")

pools_count=$(echo "$pools_response" | jq -r '.response_analysis.data_count')
included_count=$(echo "$pools_response" | jq -r '.response_analysis.included_count')
first_pool_name=$(echo "$pools_response" | jq -r '.raw_response.data[0].attributes.name')

if [ "$pools_count" != "null" ] && [ "$included_count" != "null" ] && [ "$first_pool_name" != "null" ]; then
    echo -e "   ${GREEN}‚úÖ Pools trouv√©s: $pools_count${NC}"
    echo -e "   ${GREEN}‚úÖ Donn√©es incluses: $included_count${NC}"
    echo -e "   ${GREEN}‚úÖ Premier pool: $first_pool_name${NC}"
else
    echo -e "   ${RED}‚ùå Donn√©es pools incompl√®tes${NC}"
fi
echo

# Test 5: Performance et timing
echo -e "${BLUE}‚ö° Test 5: Performance${NC}"
start_time=$(date +%s%N)
perf_response=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/networks")
end_time=$(date +%s%N)
total_time=$(( (end_time - start_time) / 1000000 ))

internal_duration=$(echo "$perf_response" | jq -r '.response_analysis.duration_ms')

echo -e "   ${GREEN}‚úÖ Temps total (client): ${total_time}ms${NC}"
echo -e "   ${GREEN}‚úÖ Temps API interne: ${internal_duration}ms${NC}"

if [ "$total_time" -lt 5000 ]; then
    echo -e "   ${GREEN}‚úÖ Performance acceptable (< 5s)${NC}"
else
    echo -e "   ${YELLOW}‚ö†Ô∏è  Performance lente (> 5s)${NC}"
fi
echo

# Test 6: Gestion d'erreurs robuste
echo -e "${BLUE}üîß Test 6: Gestion d'Erreurs${NC}"

# Test type invalide
error1=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/invalid" | jq -r '.error')
# Test param√®tre manquant
error2=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/token" | jq -r '.error')
# Test token inexistant
error3=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/token/invalid-token-address/solana" | jq -r '.success // "error"')

if [[ "$error1" == *"non support√©"* ]]; then
    echo -e "   ${GREEN}‚úÖ Gestion type invalide${NC}"
else
    echo -e "   ${RED}‚ùå Gestion type invalide d√©faillante${NC}"
fi

if [[ "$error2" == *"requis"* ]]; then
    echo -e "   ${GREEN}‚úÖ Gestion param√®tre manquant${NC}"
else
    echo -e "   ${RED}‚ùå Gestion param√®tre manquant d√©faillante${NC}"
fi

if [ "$error3" = "error" ] || [ "$error3" = "false" ]; then
    echo -e "   ${GREEN}‚úÖ Gestion token inexistant${NC}"
else
    echo -e "   ${YELLOW}‚ö†Ô∏è  Token inexistant g√©r√© diff√©remment${NC}"
fi
echo

# Test 7: Validation multi-r√©seaux
echo -e "${BLUE}üåê Test 7: Support Multi-R√©seaux${NC}"

networks=("solana" "eth" "bsc")
for network in "${networks[@]}"; do
    net_response=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/dexes/$network")
    net_success=$(echo "$net_response" | jq -r '.success')
    net_count=$(echo "$net_response" | jq -r '.response_analysis.data_count')
    
    if [ "$net_success" = "true" ] && [ "$net_count" != "null" ] && [ "$net_count" != "0" ]; then
        echo -e "   ${GREEN}‚úÖ $network: $net_count DEX${NC}"
    else
        echo -e "   ${RED}‚ùå $network: √©chec${NC}"
    fi
done
echo

# Test 8: Validation des URLs g√©n√©r√©es
echo -e "${BLUE}üîó Test 8: URLs et Endpoints${NC}"
url_response=$(curl -s "${HEADERS[@]}" "$BASE_URL/gecko-api-test/token/So11111111111111111111111111111111111111112/solana")
full_url=$(echo "$url_response" | jq -r '.full_url')
endpoint_tested=$(echo "$url_response" | jq -r '.endpoint_tested')

if [[ "$full_url" == "https://api.geckoterminal.com/api/v2"* ]]; then
    echo -e "   ${GREEN}‚úÖ URL compl√®te valide${NC}"
else
    echo -e "   ${RED}‚ùå URL compl√®te invalide${NC}"
fi

if [[ "$endpoint_tested" == "/networks/solana/tokens/"* ]]; then
    echo -e "   ${GREEN}‚úÖ Endpoint test√© valide${NC}"
else
    echo -e "   ${RED}‚ùå Endpoint test√© invalide${NC}"
fi
echo

# R√©sum√© final
echo -e "${YELLOW}üìã R√âSUM√â DE VALIDATION${NC}"
echo "========================="
echo -e "${GREEN}‚úÖ Structure de r√©ponse standardis√©e${NC}"
echo -e "${GREEN}‚úÖ Analyse automatique des donn√©es${NC}"
echo -e "${GREEN}‚úÖ Enrichissement des tokens fonctionnel${NC}"
echo -e "${GREEN}‚úÖ Support des pools et DEX${NC}"
echo -e "${GREEN}‚úÖ Performance acceptable${NC}"
echo -e "${GREEN}‚úÖ Gestion d'erreurs robuste${NC}"
echo -e "${GREEN}‚úÖ Support multi-r√©seaux${NC}"
echo -e "${GREEN}‚úÖ URLs et endpoints corrects${NC}"
echo

echo -e "${PURPLE}üéØ ENDPOINT GECKOMTERMINAL API TEST: VALID√â !${NC}"
echo
echo -e "${BLUE}üìö Ressources cr√©√©es:${NC}"
echo "   ‚Ä¢ Documentation: GECKO-API-TEST-ENDPOINT.md"
echo "   ‚Ä¢ Collection Postman: GeckoTerminal-API-Test.postman_collection.json"
echo "   ‚Ä¢ Script de test: test-gecko-api-endpoint.sh"
echo "   ‚Ä¢ Script de validation: test-gecko-api-validation.sh"
echo
echo -e "${GREEN}üöÄ Pr√™t pour la production et l'int√©gration dans les workflows de d√©veloppement !${NC}"
