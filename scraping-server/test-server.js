// Test local du serveur de scraping
const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001';
const AUTH_TOKEN = 'default-token';

async function testServer() {
  console.log('üß™ Test du serveur de scraping...\n');

  try {
    // 1. Test health check
    console.log('1Ô∏è‚É£ Test Health Check...');
    const healthResponse = await fetch(`${BASE_URL}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health:', healthData);
    console.log('');

    // 2. D√©marrer un job de test
    console.log('2Ô∏è‚É£ D√©marrage job de scraping...');
    const jobId = `test_${Date.now()}`;
    
    const startResponse = await fetch(`${BASE_URL}/api/start-scraping`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${AUTH_TOKEN}`
      },
      body: JSON.stringify({
        jobId: jobId,
        url: 'https://dune.com/sunnypost/solana-top-trade-wallets-finder-last-days-v3',
        callback_url: null // Pas de webhook pour le test
      })
    });

    const startData = await startResponse.json();
    console.log('‚úÖ Job d√©marr√©:', startData);
    console.log('');

    // 3. V√©rifier le statut p√©riodiquement
    console.log('3Ô∏è‚É£ Surveillance du statut...');
    let attempts = 0;
    const maxAttempts = 60; // 10 minutes max

    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 10000)); // 10 secondes
      
      const statusResponse = await fetch(`${BASE_URL}/api/job-status/${jobId}`, {
        headers: {
          'Authorization': `Bearer ${AUTH_TOKEN}`
        }
      });
      
      const statusData = await statusResponse.json();
      console.log(`üìä Statut (${++attempts}/60):`, {
        status: statusData.status,
        current_page: statusData.current_page || 0,
        total_pages: statusData.total_pages || 'unknown',
        wallets_count: statusData.wallets_count || 0
      });

      if (statusData.status === 'completed') {
        console.log('‚úÖ Job termin√© avec succ√®s!');
        console.log(`üéØ R√©sultats: ${statusData.wallets_count} wallets r√©cup√©r√©s`);
        break;
      }

      if (statusData.status === 'failed') {
        console.log('‚ùå Job √©chou√©:', statusData.error);
        break;
      }
    }

    if (attempts >= maxAttempts) {
      console.log('‚è∞ Timeout: Job trop long');
    }

  } catch (error) {
    console.error('‚ùå Erreur test:', error.message);
  }
}

// Lancer le test si ce script est ex√©cut√© directement
if (require.main === module) {
  testServer();
}

module.exports = { testServer };
