#!/usr/bin/env node

/**
 * V√©rification des services utilis√©s par l'API complete
 */

require('dotenv').config();

async function checkServicesUsed() {
    console.log('üîç V√âRIFICATION DES SERVICES UTILIS√âS\n');
    console.log('=' * 50);
    
    const apiUrl = process.env.API_BASE_URL + '/cielo-api';
    const authToken = process.env.SUPABASE_ANON_KEY;
    
    // Test avec diff√©rents types de requ√™tes pour voir les logs
    const tests = [
        { name: 'Health Check', body: { action: 'health' } },
        { name: 'Complete Data', body: { action: 'complete', wallet_address: 'test' } },
        { name: 'Status Check', body: { action: 'status' } }
    ];
    
    for (const test of tests) {
        console.log(`\nüß™ TEST: ${test.name}`);
        console.log('-' * 30);
        
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify(test.body)
            });
            
            console.log(`Status: ${response.status}`);
            
            if (response.ok) {
                const data = await response.json();
                
                // Chercher des indices sur les services utilis√©s
                const responseText = JSON.stringify(data, null, 2);
                
                if (responseText.includes('mock')) {
                    console.log('üìä Type de donn√©es: MOCK (simul√©es)');
                } else if (responseText.includes('real')) {
                    console.log('üìä Type de donn√©es: R√âELLES');
                } else {
                    console.log('üìä Type de donn√©es: Ind√©termin√©');
                }
                
                if (data.debug) {
                    console.log('üîç Debug info:', data.debug);
                }
                
                if (data.use_mock_data !== undefined) {
                    console.log(`üé≠ Mode Mock: ${data.use_mock_data ? 'Activ√©' : 'D√©sactiv√©'}`);
                }
                
                // Chercher des mentions d'APIs externes
                if (responseText.includes('gmgn')) {
                    console.log('üîå Service GMGN: Mentionn√©');
                }
                
                if (responseText.includes('geckoterminal')) {
                    console.log('üîå Service GeckoTerminal: Pr√©sent dans les donn√©es');
                }
                
                if (responseText.includes('coingecko')) {
                    console.log('üîå Service CoinGecko: Mentionn√©');
                }
                
            } else {
                console.log(`Erreur: ${response.statusText}`);
            }
            
        } catch (err) {
            console.log(`Erreur: ${err.message}`);
        }
    }
    
    // Test direct sur l'endpoint complete
    console.log('\nüöÄ TEST DIRECT COMPLETE API:');
    console.log('=' * 40);
    
    try {
        const walletTest = "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM";
        const response = await fetch(`${apiUrl}/complete/${walletTest}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            
            console.log('üìä ANALYSE DES DONN√âES RETOURN√âES:');
            console.log(`   ‚Ä¢ Structure: ${Object.keys(data).join(', ')}`);
            
            if (data.data) {
                console.log(`   ‚Ä¢ Sections: ${Object.keys(data.data).join(', ')}`);
                
                // Analyser la qualit√© des donn√©es
                if (data.data.summary) {
                    const summary = data.data.summary;
                    console.log(`   ‚Ä¢ Tokens trad√©s: ${summary.total_tokens_traded || 'N/A'}`);
                    console.log(`   ‚Ä¢ PnL total: $${summary.total_pnl_usd?.toLocaleString() || 'N/A'}`);
                    console.log(`   ‚Ä¢ Win rate: ${summary.winrate?.toFixed(1) || 'N/A'}%`);
                }
                
                // V√©rifier l'enrichissement GeckoTerminal
                if (data.data.summary?.geckoterminal_enrichment) {
                    const enrichment = data.data.summary.geckoterminal_enrichment;
                    console.log(`   ‚Ä¢ GeckoTerminal enrichment: ${enrichment.enrichment_completion_status}`);
                    console.log(`   ‚Ä¢ Tokens enrichis: ${enrichment.total_enriched_tokens}/${enrichment.total_tokens_processed}`);
                }
                
                // Analyser les donn√©es du portfolio
                if (data.data.portfolio?.data?.portfolio) {
                    const portfolio = data.data.portfolio.data.portfolio;
                    console.log(`   ‚Ä¢ Portfolio tokens: ${portfolio.length}`);
                    
                    const hasRealMarketCaps = portfolio.some(token => 
                        token.geckoterminal_complete_data?.market_cap_usd > 0
                    );
                    
                    if (hasRealMarketCaps) {
                        console.log('   ‚úÖ Market caps r√©elles d√©tect√©es');
                    } else {
                        console.log('   ‚ö†Ô∏è  Market caps manquantes ou simul√©es');
                    }
                }
            }
            
        } else {
            console.log(`Erreur complete: ${response.status}`);
        }
        
    } catch (err) {
        console.log(`Erreur complete: ${err.message}`);
    }
    
    console.log('\n' + '=' * 50);
    console.log('üìã CONCLUSION SUR LES SERVICES:');
    console.log('');
    console.log('üîå SERVICES CONFIRM√âS:');
    console.log('  ‚úÖ Supabase Edge Function (cielo-api)');
    console.log('  ‚úÖ Market Cap Risk Analyzer (local)');
    console.log('  ‚úÖ Donn√©es enrichies GeckoTerminal (dans la r√©ponse)');
    console.log('');
    console.log('‚ùì SERVICES √Ä V√âRIFIER:');
    console.log('  üìä Source des donn√©es Solana (mock vs r√©elles)');
    console.log('  üîç APIs externes GMGN/Cielo (configuration √† confirmer)');
    console.log('');
    console.log('üí° Pour utiliser de vraies APIs Solana:');
    console.log('  1. Configurer GMGN_API_KEY dans Supabase');
    console.log('  2. Configurer CIELO_API_URL dans Supabase');
    console.log('  3. D√©finir USE_MOCK_DATA=false dans Supabase');
}

if (require.main === module) {
    checkServicesUsed().catch(console.error);
}
