const fs = require('fs');
require('dotenv').config();

console.log('üß™ Test de configuration des scripts Node.js\n');

// V√©rifier la configuration
console.log('üìã Configuration :');
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
console.log(`   SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
console.log(`   COINGECKO_API_KEY: ${process.env.COINGECKO_API_KEY ? '‚úÖ D√©fini' : '‚ö†Ô∏è  Optionnel'}`);

// V√©rifier les d√©pendances
console.log('\nüì¶ D√©pendances :');
try {
  require('@supabase/supabase-js');
  console.log('   @supabase/supabase-js: ‚úÖ');
} catch (e) {
  console.log('   @supabase/supabase-js: ‚ùå');
}

try {
  require('puppeteer-extra');
  console.log('   puppeteer-extra: ‚úÖ');
} catch (e) {
  console.log('   puppeteer-extra: ‚ùå');
}

try {
  require('axios');
  console.log('   axios: ‚úÖ');
} catch (e) {
  console.log('   axios: ‚ùå');
}

// V√©rifier les scripts disponibles
console.log('\nüìù Scripts disponibles :');
const scripts = [
  'dune-scraper.js',
  'api-gmgn.js', 
  'complete-data-extractor.js',
  'upload-to-supabase.js'
];

scripts.forEach(script => {
  const exists = fs.existsSync(script);
  console.log(`   ${script}: ${exists ? '‚úÖ' : '‚ùå'}`);
});

console.log('\nüéØ Pour utiliser les scripts :');
console.log('   npm run dune-scraper     # Scraper dune.com');
console.log('   npm run api-gmgn         # Test API GMGN');
console.log('   npm run complete-data    # Extraction compl√®te');

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
  console.log('\n‚ö†Ô∏è  Configurez votre fichier .env avec vos cl√©s Supabase !');
  console.log('   Copiez .env.example vers .env et modifiez les valeurs');
}
